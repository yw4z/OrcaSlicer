on:
    workflow_call:
      inputs:
        cache-key:
          required: true
          type: string
        cache-path:
          required: true
          type: string
        os:
          required: true
          type: string
        arch:
          required: false
          type: string

jobs:
  build_orca:
    name: Build OrcaSlicerRED
    runs-on: ${{ inputs.os }}
    env:
      date:
      ver:
      ver_pure:

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: 'true'

      - name: load cached deps
        uses: actions/cache@v4
        with:
          path: ${{ inputs.cache-path }}
          key: ${{ inputs.cache-key }}
          fail-on-cache-miss: true

      - name: Get the version and date on Ubuntu and macOS
        if: inputs.os != 'windows-latest'
        run: |
          ver_pure=$(grep 'set(SoftFever_VERSION' version.inc | cut -d '"' -f2)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ver="PR-${{ github.event.number }}"
          else
            ver=V$ver_pure
          fi
          echo "ver=$ver" >> $GITHUB_ENV
          echo "ver_pure=$ver_pure" >> $GITHUB_ENV
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
        shell: bash

      - name: Get the version and date on Windows
        if: inputs.os == 'windows-latest'
        run: |
          $date = Get-Date -Format 'yyyyMMdd'
          $ref = "${{ github.ref }}"
          $eventName = "${{ github.event_name }}"
          $prNumber = "${{ github.event.number }}"
      
          if ($eventName -eq 'pull_request') {
              $ver = "PR" + $prNumber
          } else {
              $versionContent = Get-Content version.inc -Raw
              if ($versionContent -match 'set\(SoftFever_VERSION "(.*?)"\)') {
                  $ver = $matches[1]
              }
              $ver = "V$ver"
          }
      
          echo "ver=$ver" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "date=$date" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "date: ${{ env.date }} version: ${{ env.ver }}"
        shell: pwsh
        
#   Mac
      - name: Install tools mac
        if: inputs.os == 'macos-12'
        run: |
          brew install cmake git gettext tree ninja
          brew list
          mkdir -p ${{ github.workspace }}/deps/build_${{inputs.arch}}
          mkdir -p ${{ github.workspace }}/deps/build_${{inputs.arch}}/OrcaSlicer_dep_${{inputs.arch}}
          tree ${{ github.workspace }}/deps/build_${{inputs.arch}}/OrcaSlicer_dep_${{inputs.arch}}

      - name: Build slicer mac
        if: inputs.os == 'macos-12'
        working-directory: ${{ github.workspace }}
        run: |
          ./build_release_macos.sh -s -n -x -a ${{inputs.arch}} -t 10.15

      - name: Pack OrcaSlicer
        if: inputs.os == 'macos-12'
        working-directory: ${{ github.workspace }}
        run: |
          export ver=$(grep '^#define SoftFever_VERSION' ./build_${{inputs.arch}}/src/libslic3r/libslic3r_version.h | cut -d ' ' -f3)
          ver="_V${ver//\"}"
          cd ${{ github.workspace }}/build_${{inputs.arch}}/OrcaSlicer
          zip -FSrq OrcaSlicerRED${ver}_Mac_${{inputs.arch}}_${{ env.ver }}_unsigned.zip ./OrcaSlicer.app
          
      #- name: Create DMG
      #  uses: QQxiaoming/create-dmg-action@v0.0.2
      #  with:
      #    name: 'OrcaSlicer'
      #    srcdir: '${{ github.workspace }}/build_x86_64/OrcaSlicer/OrcaSlicer.app'

      #- name: Upload OrcaSlicer.dmg
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: OrcaSlicer.dmg
      #    path: OrcaSlicer.dmg
          
      - name: Upload OrcaSlicer*.zip
        if: inputs.os == 'macos-12'
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicerRED_macOS_${{inputs.arch}}_${{ env.ver }}_UNSIGNED
          path: ${{ github.workspace }}/build_${{inputs.arch}}/OrcaSlicer/OrcaSlicer*.zip

# Windows
      - name: setup MSVC
        if: inputs.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2

      - name: Install nsis
        if: inputs.os == 'windows-latest'
        run: |
          dir "C:/Program Files (x86)/Windows Kits/10/Include"
          choco install nsis

      - name: Build slicer Win
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}
        run: .\build_release_vs2022.bat slicer

      - name: Create installer Win
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build
        run: |
          cpack -G NSIS

      - name: Pack app
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build
        shell: cmd
        run: '"C:/Program Files/7-Zip/7z.exe" a -tzip OrcaSlicerRED_Windows_${{ env.ver }}_portable.zip ${{ github.workspace }}/build/OrcaSlicer'

      - name: Pack HMS
        if: inputs.os == 'windows-latest_hms'
        working-directory: ${{ github.workspace }}/hms
        shell: cmd
        run: '"C:/Program Files/7-Zip/7z.exe" a -tzip hms_xx_json.zip ${{ github.workspace }}/hms'

     # - name: Pack PDB
     #   if: inputs.os == 'windows-latest'
     #   working-directory: ${{ github.workspace }}/build/src/Release
     #   shell: cmd
     #   run: '"C:/Program Files/7-Zip/7z.exe" a -m0=lzma2 -mx9 Debug_PDB_${{ env.ver }}_for_developers_only.7z  *.pdb'
          
      - name: Upload artifacts Win zip
        if: inputs.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicerRED_Windows_${{ env.ver }}_portable
          path: ${{ github.workspace }}/build/OrcaSlicerRED_Windows_${{ env.ver }}_portable.zip

      - name: Upload artifacts Win installer
        if: inputs.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
         name: hms_xx_json
         path: ${{ github.workspace }}/hms/hms_xx_json.zip   

      - name: Upload artifacts Win installer
        if: inputs.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicerRED_Windows_${{ env.ver }}
          path: ${{ github.workspace }}/build/OrcaSlicer*.exe


     # - name: Upload artifacts Win PDB
     #   if: inputs.os == 'windows-latest'
     #   uses: actions/upload-artifact@v3
     #   with:
     #     name: PDB_osRED
     #     path: ${{ github.workspace }}/build/src/Release/Debug_PDB_${{ env.ver }}_for_developers_only.7z

      #- name: Deploy Windows release portable
      # if: github.ref == 'refs/heads/main' && inputs.os == 'windows-latest'
      #  uses: WebFreak001/deploy-nightly@v3.0.0
       # with:
      #    upload_url: https://uploads.github.com/repos/SoftFever/OrcaSlicer/releases/137995723/assets{?name,label} 
       #   release_id: 137995723 
      #    asset_path: ${{ github.workspace }}/build/OrcaSlicer_Windows_${{ env.ver }}_portable.zip
      #    asset_name: OrcaSlicer_Windows_${{ env.ver }}_portable.zip
       #   asset_content_type: application/x-zip-compressed 
      #    max_releases: 1 
      #
      #- name: Deploy Windows release installer
       # if: github.ref == 'refs/heads/main' && inputs.os == 'windows-latest'
       # uses: WebFreak001/deploy-nightly@v3.0.0
      #  with:
        #   upload_url: https://uploads.github.com/repos/KrissMor/OrcaSlicerRED/releases/142424087/assets{?name,label} 
         #  release_id: 142424087 
        #   asset_path: ${{ github.workspace }}/build/OrcaSlicerRED_Windows_Installer_${{ env.ver }}.exe
       #    asset_name: OrcaSlicerRED_Windows_Installer_${{ env.ver }}.exe
        #   asset_content_type: application/x-msdownload
         #  max_releases: 1 

# Ubuntu
      - name: Install dependencies
        if: inputs.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf build-essential cmake curl eglexternalplatform-dev \
          extra-cmake-modules file git libcairo2-dev libcurl4-openssl-dev libdbus-1-dev libglew-dev libglu1-mesa-dev \
          libglu1-mesa-dev libgstreamer1.0-dev libgstreamerd-3-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev \
          libgtk-3-dev libgtk-3-dev libmspack-dev libosmesa6-dev libsecret-1-dev libsoup2.4-dev libssl-dev libudev-dev libwayland-dev \
          libwebkit2gtk-4.0-dev libxkbcommon-dev locales locales-all m4 pkgconf sudo wayland-protocols wget

      - name: Install dependencies from BuildLinux.sh
        if: inputs.os == 'ubuntu-20.04'
        shell: bash
        run: sudo ./BuildLinux.sh -ur

      - name: Fix permissions
        if: inputs.os == 'ubuntu-20.04'
        shell: bash
        run: sudo chown $USER -R ./

      - name: Build slicer
        if: inputs.os == 'ubuntu-20.04'
        shell: bash
        run: |
          ./BuildLinux.sh -isr
          chmod +x ./build/OrcaSlicerRED_Linux_${{ env.ver }}.AppImage
        
      - name: Upload artifacts Ubuntu
        if: inputs.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicerRED_Linux_${{ env.ver }}
          path: './build/OrcaSlicerRED_Linux_${{ env.ver }}.AppImage'
